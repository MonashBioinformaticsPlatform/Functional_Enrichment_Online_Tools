`Time (mins)` = c(
# LP (total 15 min)
15,
# HK (total 65 min after reduction)
30, 20, 15, 30,
# GI (3 hours total)
45,
# Lunch
30,
# GI
55,
# SA
60
)
) %>%
mutate(
Start = start_time + minutes(c(0, head(cumsum(`Time (mins)`), -1))),
End   = start_time + minutes(cumsum(`Time (mins)`)),
Start = format(Start, "%I:%M %p"),
End   = format(End,   "%I:%M %p")
)
# Optional sanity checks
stopifnot(sum(schedule$`Time (mins)`) == 300)
# Render the table with specified column widths
kable(schedule, "html", escape = FALSE) %>%
kable_styling(full_width = FALSE, position = "center") %>%
column_spec(1, width = "10em", bold = TRUE) %>%  # Adjust width
column_spec(3, width = "25em")  # Center align
library(knitr)
suppressWarnings(library(kableExtra))
library(downlit)
# Create the table data
# One-day schedule: 10:00–15:00 (5 hours)
# Added 30-min Lunch break
library(dplyr)
library(lubridate)
start_time <- ymd_hm("2025-11-13 10:00")  # arbitrary date; time anchors the day
schedule <- tibble::tibble(
Instructor = c(
# Part 1 — LP (10 min)
rep("LP", 1),
# Part 2 — HK ()
rep("HK", 4),
# Part 3 — GI (2 hrs)
rep("GI", 1),
# Lunch (30 min)
"",
# Part 4 — GI (2 hrs)
rep("GI", 1),
# Part 5 — SA (1 hr)
rep("SA", 1)
),
Activity = c(
# LP
"Welcome and housekeeping",
# HK
"Introduction",
"Data acquisition & filtering gene list",
"Interactive Calculator; https://bioinformatics3.erc.monash.edu/rsconnect/content/241/",
"gProfiler [GO + pathways] (https://biit.cs.ut.ee/gprofiler/gost)",
# GI - 1
"STRING (https://string-db.org/)",
# Lunch
"Lunch break",
# GI - 2
"GSEA (https://www.gsea-msigdb.org/)  <br>
(GenePattern) (https://cloud.genepattern.org/)",
# SA
"Reactome (https://reactome.org/)"
),
`Time (mins)` = c(
# LP (total 15 min)
15,
# HK (total 65 min after reduction)
30, 20, 15, 30,
# GI (3 hours total)
45,
# Lunch
30,
# GI
55,
# SA
60
)
) %>%
mutate(
Start = start_time + minutes(c(0, head(cumsum(`Time (mins)`), -1))),
End   = start_time + minutes(cumsum(`Time (mins)`)),
Start = format(Start, "%I:%M %p"),
End   = format(End,   "%I:%M %p")
)
# Optional sanity checks
stopifnot(sum(schedule$`Time (mins)`) == 300)
# Render the table with specified column widths
kable(schedule, "html", escape = FALSE) %>%
kable_styling(full_width = FALSE, position = "center") %>%
column_spec(1, width = "10em", bold = TRUE) %>%  # Adjust width
column_spec(3, width = "25em")  # Center align
library(knitr)
suppressWarnings(library(kableExtra))
library(downlit)
# Create the table data
# One-day schedule: 10:00–15:00 (5 hours)
# Added 30-min Lunch break
library(dplyr)
library(lubridate)
start_time <- ymd_hm("2025-11-13 10:00")  # arbitrary date; time anchors the day
schedule <- tibble::tibble(
Instructor = c(
# Part 1 — LP (10 min)
rep("LP", 1),
# Part 2 — HK ()
rep("HK", 4),
# Part 3 — GI (2 hrs)
rep("GI", 1),
# Lunch (30 min)
"",
# Part 4 — GI (2 hrs)
rep("GI", 1),
# Part 5 — SA (1 hr)
rep("SA", 1)
),
Activity = c(
# LP
"Welcome and housekeeping",
# HK
"Introduction",
"Data acquisition & filtering gene list",
"Interactive Calculator <br> https://bioinformatics3.erc.monash.edu/rsconnect/content/241/",
"gProfiler (https://biit.cs.ut.ee/gprofiler/gost)",
# GI - 1
"STRING (https://string-db.org/)",
# Lunch
"Lunch break",
# GI - 2
"GSEA (https://www.gsea-msigdb.org/) <br>
(GenePattern) (https://cloud.genepattern.org/)",
# SA
"Reactome (https://reactome.org/)"
),
`Time (mins)` = c(
# LP (total 15 min)
15,
# HK (total 65 min after reduction)
30, 20, 15, 30,
# GI (3 hours total)
40,
# Lunch
30,
# GI
60,
# SA
60
)
) %>%
mutate(
Start = start_time + minutes(c(0, head(cumsum(`Time (mins)`), -1))),
End   = start_time + minutes(cumsum(`Time (mins)`)),
Start = format(Start, "%I:%M %p"),
End   = format(End,   "%I:%M %p")
)
# Optional sanity checks
stopifnot(sum(schedule$`Time (mins)`) == 300)
# Render the table with specified column widths
kable(schedule, "html", escape = FALSE) %>%
kable_styling(full_width = FALSE, position = "center") %>%
column_spec(1, width = "10em", bold = TRUE) %>%  # Adjust width
column_spec(3, width = "25em")  # Center align
library(knitr)
suppressWarnings(library(kableExtra))
library(downlit)
# Create the table data
# One-day schedule: 10:00–15:00 (5 hours)
# Added 30-min Lunch break
library(dplyr)
library(lubridate)
start_time <- ymd_hm("2025-11-13 10:00")  # arbitrary date; time anchors the day
schedule <- tibble::tibble(
Instructor = c(
# Part 1 — LP (10 min)
rep("LP", 1),
# Part 2 — HK ()
rep("HK", 4),
# Part 3 — GI (2 hrs)
rep("GI", 1),
# Lunch (30 min)
"",
# Part 4 — GI (2 hrs)
rep("GI", 1),
# Part 5 — SA (1 hr)
rep("SA", 1)
),
Activity = c(
# LP
"Welcome and housekeeping",
# HK
"Introduction to functional enrichment analysis",
"Data acquisition & filtering gene list",
"Interactive Calculator <br> https://bioinformatics3.erc.monash.edu/rsconnect/content/241/",
"gProfiler (https://biit.cs.ut.ee/gprofiler/gost)",
# GI - 1
"STRING (https://string-db.org/)",
# Lunch
"Lunch break",
# GI - 2
"GSEA (https://www.gsea-msigdb.org/) <br>
(GenePattern) (https://cloud.genepattern.org/)",
# SA
"Reactome (https://reactome.org/)"
),
`Time (mins)` = c(
# LP (15 min)
10,
# HK (95 mins)
25, 20, 15, 40,
# GI (100 mins)
40,
# Lunch
30,
# GI
60,
# SA (60 mins)
60
)
) %>%
mutate(
Start = start_time + minutes(c(0, head(cumsum(`Time (mins)`), -1))),
End   = start_time + minutes(cumsum(`Time (mins)`)),
Start = format(Start, "%I:%M %p"),
End   = format(End,   "%I:%M %p")
)
# Optional sanity checks
stopifnot(sum(schedule$`Time (mins)`) == 300)
# Render the table with specified column widths
kable(schedule, "html", escape = FALSE) %>%
kable_styling(full_width = FALSE, position = "center") %>%
column_spec(1, width = "10em", bold = TRUE) %>%  # Adjust width
column_spec(3, width = "25em")  # Center align
library(knitr)
suppressWarnings(library(kableExtra))
library(downlit)
# Create the table data
# One-day schedule: 10:00–15:00 (5 hours)
# Added 30-min Lunch break
library(dplyr)
library(lubridate)
start_time <- ymd_hm("2025-11-13 10:00")  # arbitrary date; time anchors the day
schedule <- tibble::tibble(
Instructor = c(
# Part 1 — LP (10 min)
rep("LP", 1),
# Part 2 — HK ()
rep("HK", 4),
# Part 3 — GI (2 hrs)
rep("GI", 1),
# Lunch (30 min)
"",
# Part 4 — GI (2 hrs)
rep("GI", 1),
# Part 5 — SA (1 hr)
rep("SA", 1)
),
Activity = c(
# LP
"Welcome and housekeeping",
# HK
"Introduction to functional enrichment analysis",
"Data acquisition & filtering gene list",
"Interactive Calculator <br> https://bioinformatics3.erc.monash.edu/rsconnect/content/241/",
"gProfiler (https://biit.cs.ut.ee/gprofiler/gost)",
# GI - 1
"STRING (https://string-db.org/)",
# Lunch
"Lunch break",
# GI - 2
"GSEA (https://www.gsea-msigdb.org/) <br>
(GenePattern) (https://cloud.genepattern.org/)",
# SA
"Reactome (https://reactome.org/)"
),
`Time (mins)` = c(
# LP (10 min)
10,
# HK (100 mins)
25, 20, 15, 40,
# GI (100 mins)
40,
# Lunch
30,
# GI
60,
# SA (60 mins)
60
)
) %>%
mutate(
Start = start_time + minutes(c(0, head(cumsum(`Time (mins)`), -1))),
End   = start_time + minutes(cumsum(`Time (mins)`)),
Start = format(Start, "%I:%M %p"),
End   = format(End,   "%I:%M %p")
)
# Optional sanity checks
stopifnot(sum(schedule$`Time (mins)`) == 300)
# Render the table with specified column widths
kable(schedule, "html", escape = FALSE) %>%
kable_styling(full_width = FALSE, position = "center") %>%
column_spec(1, width = "10em", bold = TRUE) %>%  # Adjust width
column_spec(3, width = "25em")  # Center align
library(knitr)
suppressWarnings(library(kableExtra))
library(downlit)
# Create the table data
# One-day schedule: 10:00–15:00 (5 hours)
# Added 30-min Lunch break
library(dplyr)
library(lubridate)
start_time <- ymd_hm("2025-11-13 10:00")  # arbitrary date; time anchors the day
schedule <- tibble::tibble(
Instructor = c(
# Part 1 — LP (10 min)
rep("LP", 1),
# Part 2 — HK ()
rep("HK", 4),
# Part 3 — GI (2 hrs)
rep("GI", 1),
# Lunch (30 min)
"",
# Part 4 — GI (2 hrs)
rep("GI", 1),
# Part 5 — SA (1 hr)
rep("SA", 1)
),
Activity = c(
# LP
"Welcome and housekeeping",
# HK
"Introduction to functional enrichment analysis",
"Data acquisition & filtering gene list",
"Interactive Calculator <br> https://bioinformatics3.erc.monash.edu/rsconnect/content/241/",
"gProfiler (https://biit.cs.ut.ee/gprofiler/gost)",
# GI - 1
"STRING (https://string-db.org/)",
# Lunch
"Lunch break",
# GI - 2
"GSEA (https://www.gsea-msigdb.org/) <br>
(GenePattern) (https://cloud.genepattern.org/)",
# SA
"Reactome (https://reactome.org/)"
),
`Time (mins)` = c(
# LP (10 min)
10,
# HK (100 mins)
30, 15, 15, 40,
# GI (100 mins)
40,
# Lunch
30,
# GI
60,
# SA (60 mins)
60
)
) %>%
mutate(
Start = start_time + minutes(c(0, head(cumsum(`Time (mins)`), -1))),
End   = start_time + minutes(cumsum(`Time (mins)`)),
Start = format(Start, "%I:%M %p"),
End   = format(End,   "%I:%M %p")
)
# Optional sanity checks
stopifnot(sum(schedule$`Time (mins)`) == 300)
# Render the table with specified column widths
kable(schedule, "html", escape = FALSE) %>%
kable_styling(full_width = FALSE, position = "center") %>%
column_spec(1, width = "10em", bold = TRUE) %>%  # Adjust width
column_spec(3, width = "25em")  # Center align
data <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)
data <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)
a=50
b=100
c=200
d=15900
data <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)
# Two-tailed test
fisher.test(data, alternative = "two.sided")
# One-tailed test
fisher.test(data, alternative = "greater") # or "less"
data <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)
data
data <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)
# Two-tailed test
fisher.test(data, alternative = "two.sided")
# Two-tailed test
fisher.test(data, alternative = "two.sided")
# One-tailed test
fisher.test(data, alternative = "greater") # or "less"
a=50
b=100
c=200
d=15900
data <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)
data
# Two-tailed test
fisher.test(data, alternative = "two.sided")
# One-tailed test
fisher.test(data, alternative = "greater") # or "less"
?fisher.test
a=50
b=100
c=200
d=15900
data <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)
# Two-tailed test
fisher.test(data, alternative = "t") # two.sided
# One-tailed test
fisher.test(data, alternative = "g") # greater or "less"
# Two-tailed test
fisher.test(data, alternative = "t") # two.sided
# One-tailed test
fisher.test(data, alternative = "g") # greater or "less"
a
b
c
# Hypergeometric test (upper-tail)
# Probability of drawing at least 'a' successes
1 - phyper(x, m, n, k)
K <- c      # total number of "success" items in population
n <- d      # total number of "failure" items in population
k <- a + b  # number of draws
x <- a - 1  # number of observed successes minus 1 (for upper-tail test)
1 - phyper(x, m, n, k)
m <- c      # total number of "success" items in population
n <- d      # total number of "failure" items in population
k <- a + b  # number of draws
x <- a - 1
phyper(k-1, K, N-K, n, lower.tail = FALSE)
1 - phyper(x, m, n, k)
phyper(a, m, n, k)
m <- c      # total number of "success" items in population
n <- d      # total number of "failure" items in population
k <- a + b  # number of draws
x <- a - 1
phyper(a, m, n, k)
?phyper()
q <- 50
m <- 250
n <- 16000
k <- 150
# cumulative P(X <= q)
phyper(q, m, n, k, lower.tail = TRUE)
# upper-tail p-value (enrichment): P(X >= q) = 1 - P(X <= q-1)
1 - phyper(q - 1, m, n, k, lower.tail = TRUE)
c
q <- 50
m <- 250
n <- 16000
k <- 150
# cumulative P(X <= q)
phyper(q, m, n, k, lower.tail = TRUE)
q <- 50      # number of genes in both the list and the term
m <- 250     # total number of genes in the term (in population)
n <- 16000   # total number of genes not in the term (in population)
k <- 150     # total number of genes in the list (sample size)
phyper(q, m, n, k, lower.tail = TRUE)
q <- 50      # number of genes in both the list and the term
m <- 250     # total number of genes in the term (in population)
n <- 16000   # total number of genes not in the term (in population)
k <- 150     # total number of genes in the list (sample size)
phyper(q - 1, m, n, k, lower.tail = TRUE)
m
n
k
q <- 50      # observed overlap (successes in sample)
m <- 250     # successes in population (in term)
n <- 16000   # failures in population (not in term)
k <- 150     # sample size (gene list size)
phyper(q - 1, m, n, k, lower.tail = TRUE)
a=50
b=100
c=200
d=15900
data <- matrix(c(a, b, c, d), nrow = 2, byrow = TRUE)
# Two-tailed test
fisher.test(data, alternative = "t") # two.sided
# One-tailed test
fisher.test(data, alternative = "g") # greater or "less"
# Observed value
a <- 50
b <- 100
c <- 200
d <- 15900
a <- 50
b <- 100
c <- 200
d <- 15900
N <- a + b + c + d
K <- a + c
n <- a + b
# One-tailed p-value (P[X >= a])
p_right <- phyper(a - 1, K, N - K, n, lower.tail = FALSE)
p_right
# One-tailed p-value (P[X <= a])
p_left  <- phyper(a, K, N - K, n, lower.tail = TRUE)
p_left
p_left
p_right
p_two <- 2 * min(p_left, p_right)
p_two <- min(p_two, 1)  # cap at 1
p_two
git status
